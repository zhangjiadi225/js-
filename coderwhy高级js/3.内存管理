垃圾回收   GC  垃圾回收器

GC算法
1 引用计数
判断引用  当计数为0时   进行空间释放   
弊端: 循环引用  a,b互相引用    会造成内存泄漏  
2 标记清除
设置一个根对象 垃圾回收器会定期从根对象开始  找到从根开始有引用到的对象 , 对于那些没引用到的对象就是不可用对象


**v8引擎的垃圾回收机制**
V8引擎是使用的准确式GC,GC算法采用了分代式垃圾回收机制
v8引将内存空间分为二个部分，新生代和老年代，这二个部分里面的大小空间和生命周期是不一样的。
新生代中的空间一般比较小，生命周期比较短。在新生代空间中，其中空间主要分为二部
分，这二个空间一定会有一个是使用的另一个是空闲的，当其中一个部分的内存被填充满的
时候，新生代算法就会启动将这部分里面存活的对象正在使用的对象转移到另外一个部分
中，并且将失活的对象销毁。如此一个来回就是一个新生代的算法过程，并且会给每一个进
行过一个来回的对象打上标记。
老年代中的空间一般比较大，并且生命周期也很长。
对象进入老年代算法中只有二种情况，在新生代中经历过一次轮回并且被打上标记的标
签，第二种就是对象的大小占用了新生代的25%的对象
老年代阶段会遍历所有的对象，然后标记所有的存活的对象，然后销毁掉所有失活的对象
最新版本的v8引擎新生代和老年代以及js是同时运行的。所以不会有什么性能消耗。
清除对象会造成内存碎片，当碎片过多的时候就会启动压缩算法（将碎片压缩，然后移动存活
的对象，在释放掉内存，释放完成之后在将对象重新移动进去）
